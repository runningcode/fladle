{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Fladle","text":"<p>The Gradle Plugin for Firebase Test Lab and Flank.</p> <p>Fladle is the easiest way to scale your instrumentation tests using Firebase Test Lab. Apply the gradle plugin and runFlank! You can easily run many hours of instrumentation tests using hundreds of devices in Test Lab and get the results in just few minutes. Fladle simplifies the configuration necessary to scale your tests using Firebase Test Lab and Flank.</p> <p>Fladle is mentioned in Fragmented Podcast #163. Skip to ~29 minutes.</p>"},{"location":"#new-get-started-here","title":"New? Get Started Here","text":""},{"location":"#flank","title":"Flank","text":"<p>Flank is a parallel test runner for Firebase Test Lab.</p> <p>Also read this medium post.</p>"},{"location":"#corporate-sponsors","title":"Corporate Sponsors","text":"<p>Thank you Doist for your sponsorship!</p> <p></p> <p>Sponsor Fladle!</p>"},{"location":"#trusted-by","title":"Trusted by","text":"<p>The following companies test their Android app using Fladle.</p> <p> </p> <p>Want to appear here? File an issue or open a PR</p>"},{"location":"authentication/","title":"Authentication","text":"<p>There are two authentication mechanisms for using Fladle.</p> <p>It is recommended to use user authentication on local development machines to avoid sharing credentials and a service account on CI.</p>"},{"location":"authentication/#user-authentication","title":"User authentication","text":"<p>Credentials are stored in <code>~/.flank</code>.</p> <ol> <li><code>./gradlew flankAuth</code></li> <li>Sign in to web browser.</li> <li>Specify projectId in fladle configuration</li> <li><code>./gradlew runFlank</code></li> </ol>"},{"location":"authentication/#service-account-credentials","title":"Service account credentials","text":"<ol> <li> <p>Create a service account. Service accounts aren't subject to spam checks or captcha prompts, which could    otherwise block your CI builds. Create a service account with an Editor role in the    Google Cloud Platform console.</p> </li> <li> <p>Enable required APIs. After logging in using the service account: In the Google Developers Console API Library    page, enable the Google Cloud Testing API and Cloud Tool Results API. To enable these APIs, type these API names into    the search box at the top of the console, and then click Enable API on the overview page for that API.</p> </li> <li> <p>After creating the account go to <code>Keys</code>, click <code>Add Key</code> -&gt; <code>Create a new Key</code>. Select <code>JSON</code> for the key type. This will download the json credentials.</p> </li> <li> <p>Configure the Fladle extension serviceAccountCredentials to point to the credentials.</p> </li> </ol> <p>Above instructions are based on Google instruction for authenticating with CI.</p> <p>See also Flank's instructions for authenticating with a service account.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#0180","title":"0.18.0","text":"<ul> <li>Use non-deprecated device models and versions in default config. PR Thanks Kaibolay</li> </ul>"},{"location":"changelog/#0175","title":"0.17.5","text":"<ul> <li>Support Develocity JUnit XML Reporting PR Thanks ZacSweers </li> <li>Min supported Gradle version is now 6.5</li> <li>Updated Flank version to 23.10.1 *</li> </ul>"},{"location":"changelog/#0174","title":"0.17.4","text":"<ul> <li>Add support for additionalTestApks in YamlConfigWriterTask. PR. Thanks ZacSweers</li> <li>Add <code>abi</code> option to support selecting a particular debug APK in projects that use ABI splits to produce multiple APKs. PR</li> </ul>"},{"location":"changelog/#0172","title":"0.17.2","text":"<ul> <li>Fix configuration cache support.</li> </ul>"},{"location":"changelog/#0170","title":"0.17.0","text":"<ul> <li>Fix quotes around environment variables and formatting issues.</li> </ul>"},{"location":"changelog/#0163","title":"0.16.3","text":"<ul> <li>Remove deprecation warning using <code>main</code> in <code>JavaExec</code> task.</li> <li>Conditionally declare outputs on FlankExecutionTask and mark as not up-to-date. PR</li> <li>Fix environmentVariables not passed to flank.yml PR Thanks Sinan</li> </ul>"},{"location":"changelog/#0162","title":"0.16.2","text":"<ul> <li>Fix crash accessing TestedExtension in non-android modules PR Thanks asadsalman</li> </ul>"},{"location":"changelog/#0161","title":"0.16.1","text":"<ul> <li>Treat app and library modules the same in Fulladle PR Thanks asadsalman</li> <li>Added fulladleModuleConfig to app modules PR</li> </ul> <p>Breaking API Change</p> <p>Previously, only app modules could be picked up as root-level modules in Fulladle. This has changed, now either app or library modules can be picked up (though we try app modules first). If a library module is picked up as a the root-level module, it must specifiy a <code>debugApk</code> through either the root <code>fladle</code> block or the module's own <code>fulladleModuleConfig</code> block.</p>"},{"location":"changelog/#0160","title":"0.16.0","text":"<ul> <li>Allow excluding modules from Fulladle PR</li> <li>Allow configuring extra parameters on additionalTestApks PR</li> </ul>"},{"location":"changelog/#0151","title":"0.15.1","text":"<ul> <li>Allow Flank snapshot usage PR Thanks AndrewReitz</li> <li>Fix incorrect task group name. PR</li> <li>Snapshots are now compatible with java 8 PR</li> <li>Configuration validation happens at task execution time. Fixes #239</li> <li>Configure assemble dependency per variant. Fixes #233</li> <li>Add required <code>smartFlankGcsPath</code> to samples Fixes #236</li> </ul>"},{"location":"changelog/#0150","title":"0.15.0","text":"<ul> <li>Add support for <code>async</code> flag. PR.</li> <li>Add flag for depending on assembling of debug apk and instrumentation apk automatically. <code>dependOnAssemble</code> PR Thanks asadsalman</li> <li>Gradle 7.0 Compatibility</li> </ul>"},{"location":"changelog/#0141","title":"0.14.1","text":"<ul> <li>Support new Flank options without updating Fladle Fixes #146 PR Thanks piotradamczyk5</li> </ul>"},{"location":"changelog/#0140","title":"0.14.0","text":"<ul> <li>Bump Flank version to 21.01.1</li> <li>Add support for test-targets-for-shard Fixes #205</li> <li>Add support for new flank options PR#211 Thanks pawelpasterz</li> <li>Deprecate <code>testShards</code> Fixes #204 PR#212 Thanks pawelpasterz</li> <li>Write test results into a config-specific directory PR#194 Thanks pawelpasterz</li> </ul>"},{"location":"changelog/#0131","title":"0.13.1","text":"<ul> <li>Fix flankAuth task throwing exception. Fixes #195</li> <li>Add support for newly added flank options PR#186 Thanks pawelpasterz:<ul> <li><code>default-test-time</code></li> <li><code>default-class-test-time</code></li> <li><code>additional-apks</code></li> <li><code>use-average-test-time-for-new-tests</code></li> <li><code>disable-results-upload</code></li> </ul> </li> </ul>"},{"location":"changelog/#0130","title":"0.13.0","text":"<ul> <li>Add support for sanityRobo tests Fixes #165 PR Thanks pawelpasterz</li> <li>Add support for user authentication.</li> <li>Bump Flank to 20.09.3</li> </ul> <p>Breaking API Change</p> <p>Use lazy properties Fixes #92 PR Thanks pawelpasterz</p>"},{"location":"changelog/#0121","title":"0.12.1","text":"<ul> <li>Don't override debug or instrumentation apk if already specified. Fixes #172.</li> </ul>"},{"location":"changelog/#0120","title":"0.12.0","text":"<ul> <li>Don't override property values in individual configurations. Fixes #158.</li> <li>Update Flank to 20.08.3.</li> <li>Use Github actions instead of CircleCI</li> <li>Write Yaml file to task specific output directory and add up-to-date checks. #159 Fixes #147 Thanks CristianGM</li> <li>Add support for <code>full-junit-result</code> and <code>legacy-junit-result</code>. #170 Fixes #157. Thanks MatthewTPage</li> </ul>"},{"location":"changelog/#0110","title":"0.11.0","text":"<ul> <li>Update Flank to 20.07.0.</li> <li>Only add <code>additional-test-apks</code> for modules that have tests. PR</li> <li>Experimental configuration caching support. PR1PR2</li> </ul>"},{"location":"changelog/#0102","title":"0.10.2","text":"<ul> <li>Update Flank to 20.06.2.</li> <li>Fix duplicated status messages in console. PR Thanks francescocervone</li> </ul> <p>Breaking API change</p> <p>Add time units for timeout. <code>timeoutMin</code> has been renamed to <code>testTimeout</code>. PR Thanks pawelpasterz</p>"},{"location":"changelog/#0101","title":"0.10.1","text":"<ul> <li>[Fix] Allow for specifying roboScript without specifying instrumentationApk. Fixes #128.</li> </ul>"},{"location":"changelog/#0100","title":"0.10.0","text":"<ul> <li>Allow for debugging using --dump-shards</li> <li>Fix naming for variant discovery of apk and instrumentation apk. Instead of chocolate-debug, variant must now be set as chocolateDebug.</li> <li>Update Flank to 20.05.2.</li> <li>Fulladle Preview</li> </ul> <p>Breaking API Change</p> <p>additionalTestApks now uses ListProperty instead of the previous Map. This is to allow for lazy configuration of the provided files.</p> <p>Warning</p> <p>Minimum supported Gradle version is now 5.4.</p>"},{"location":"changelog/#094","title":"0.9.4","text":"<ul> <li>Update Flank to 20.05.1. Huge new release!</li> <li>Add support for new flank flags. Thanks pawelpasterz PR</li> <li>Use compileOnly for AGP version.</li> </ul>"},{"location":"changelog/#092","title":"0.9.2","text":"<p>Breaking API change</p> <p>debugApk and instrumentationApk now use Lazy Property API to avoid resolving at configuration time.</p>"},{"location":"changelog/#091","title":"0.9.1","text":"<ul> <li>Bugfix: ability to set flank version. PR</li> </ul> <p>Breaking API Change</p> <p>serviceAccountCredentials now uses Lazy  Property API. See Configuration for details on how to set it. PR</p> <p>Warning</p> <p>Minimum required Gradle Version is now 5.1.</p> <p>Warning</p> <p>Dropped support for Flank 7.X and lower.</p>"},{"location":"changelog/#090","title":"0.9.0","text":"<ul> <li>Do not add flank maven repo. PR</li> <li>Allow specifying custom flank coordinates. PR</li> <li>Change ordering and use file provider. PR</li> </ul>"},{"location":"changelog/#081","title":"0.8.1","text":"<ul> <li>Add support for <code>additionalTestApks</code>. PR Thanks japplin.</li> <li>Add support for <code>resultsDir</code>. PR</li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":"<ul> <li>BREAKING: devices now takes a <code>List&lt;Map&lt;String, String&gt;&gt;</code> instead of a <code>List&lt;Device&gt;</code>. See the [#README.md] for an example. PR Thanks zlippard.</li> <li>Add support for <code>keep-file-path</code>. PR Thanks tahirhajizada.</li> </ul>"},{"location":"changelog/#070","title":"0.7.0","text":"<ul> <li>Add support for Flank 8 and bump version. PR Thanks francescocervone</li> </ul>"},{"location":"changelog/#067","title":"0.6.7","text":"<ul> <li>Allow using wildcards in debugApk or instrumentationApk path by not checking that file exists. PR</li> </ul>"},{"location":"changelog/#066","title":"0.6.6","text":"<ul> <li>Bump flank version to 7.0.0</li> <li>Publish to mavenCentral()</li> </ul>"},{"location":"changelog/#065","title":"0.6.5","text":"<ul> <li>Add support for results-bucket gcloud config option. PR Thanks c-moss</li> <li>Default flank version 6.2.3</li> <li>Lower build logging level</li> </ul>"},{"location":"changelog/#064","title":"0.6.4","text":"<ul> <li>Allow setting android version number as string to allow for preview versions. PRThanks JeroenMols.</li> </ul>"},{"location":"changelog/#063","title":"0.6.3","text":"<ul> <li>Allow service credentials to be set using environment variables. Fixes #55</li> <li>Fix not being able to set flankVersion. Fixes #56</li> </ul>"},{"location":"changelog/#062","title":"0.6.2","text":"<ul> <li>Fix shardTime config property not written to flank.yml Thanks nnoel-grubhub</li> </ul>"},{"location":"changelog/#061","title":"0.6.1","text":"<ul> <li>Fix project id spacing Thanks andersu for reporting.</li> </ul>"},{"location":"changelog/#060","title":"0.6.0","text":"<ul> <li>Default flank version 5.0.1</li> <li>Rename yaml output to match new flank version.</li> <li>Add support for shard time.</li> </ul>"},{"location":"changelog/#052","title":"0.5.2","text":"<ul> <li>Improve error messages for missing arguments in the fladle extension.</li> </ul>"},{"location":"changelog/#051","title":"0.5.1","text":"<ul> <li>Test multipleconfig to actually write yml Thanks PR winterDroid.</li> <li>JavaExec uses classpath instead of jar directly. Thanks PR winterDroid.</li> </ul>"},{"location":"changelog/#050","title":"0.5.0","text":"<ul> <li>Use flank as a maven artifact.</li> <li>Group Fladle Tasks</li> </ul>"},{"location":"changelog/#041","title":"0.4.1","text":"<ul> <li>Detect AndroidX test orchestrator</li> <li>Fix detection of debug and instrumentation apk paths.</li> </ul>"},{"location":"changelog/#040","title":"0.4.0","text":"<ul> <li>Add support for all configuration options. Thanks PR winterDroid.</li> </ul>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes:","text":"<p>Previous users of <code>clearPackageData = true</code> will now need to use: <pre><code>environmentVariables = [\n  \"clearPackageData\": \"true\"\n]\n</code></pre></p>"},{"location":"changelog/#038","title":"0.3.8","text":"<ul> <li>Fix broken flakyTestAttempts.</li> </ul>"},{"location":"changelog/#037","title":"0.3.7","text":"<ul> <li>Add support for flakyTestAttempts.</li> </ul>"},{"location":"changelog/#036","title":"0.3.6","text":"<ul> <li>Add support for environment variable clearPackageData. Thanks @anderssu !</li> </ul>"},{"location":"changelog/#035","title":"0.3.5","text":"<ul> <li>Automatically configure the use of test orchestrator.</li> </ul>"},{"location":"changelog/#034","title":"0.3.4","text":"<ul> <li>Add support for setting results-history-name.</li> <li>Add support for selecting variant to test instead of apk path.</li> </ul>"},{"location":"changelog/#033","title":"0.3.3","text":"<ul> <li>Add support for setting smartFlankGcsPath</li> <li>Capitalize task names.</li> </ul>"},{"location":"changelog/#032","title":"0.3.2","text":"<ul> <li>Actually fix gradle download task bug.</li> </ul>"},{"location":"changelog/#031","title":"0.3.1","text":"<ul> <li>Maybe fix bug similar to: https://github.com/michel-kraemer/gradle-download-task/issues/58</li> </ul>"},{"location":"changelog/#030","title":"0.3.0","text":"<ul> <li>Add support for multiple test configurations.</li> </ul>"},{"location":"changelog/#0212","title":"0.2.12","text":"<ul> <li>Fix broken flankDoctor task.</li> </ul>"},{"location":"changelog/#0211","title":"0.2.11","text":"<ul> <li>Add minimum Gradle version check. (4.9 is required because we use the lazy task configuration API))</li> </ul>"},{"location":"changelog/#0210","title":"0.2.10","text":"<ul> <li>Add support for specifying Flank snapshot versions. See README for configuration options.</li> </ul>"},{"location":"changelog/#029","title":"0.2.9","text":"<ul> <li>Add support for multiple build targets. PR. Thanks winterDroid.</li> <li>Add support for testShards and repeatTests flank options. See README for configuration options.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>The following configuration options must be set inside the fladle block. See the sample configuration below. There is also a groovy sample and a kotlin sample.</p>"},{"location":"configuration/#serviceaccountcredentials","title":"serviceAccountCredentials","text":"<p>User Authentication is also possible. See Authentication.</p> Groovy <pre><code>serviceAccountCredentials = project.layout.projectDirectory.file(\"flank-gradle-5cf02dc90531.json\")\n</code></pre> Kotlin <pre><code>serviceAccountCredentials.set(\"project.layout.projectDirectory.file(\"flank-gradle-5cf02dc90531.json\")\n</code></pre> <p>Optionally, the serviceAccountCredentials can be set with environment variables but then the projectId parameter must be set.</p> <p>See Authentication for more info.</p>"},{"location":"configuration/#variant","title":"variant","text":"<p>Note</p> <p><code>variant</code> must be set if using buildFlavors in order to automatically configure the debugApk and testApk.</p> <p>Set the variant to automatically configure for testing. A build variant is a combination of buildFlavor and buildType. This must also be set when testing against a non-default variant. For example: 'debug' or 'freeDebug'. Put this inside your Fladle block.</p> Groovy <pre><code>variant = \"freeDebug\"\n</code></pre> Kotlin <pre><code>variant.set(\"freeDebug\")\n</code></pre>"},{"location":"configuration/#sample-configuration","title":"Sample Configuration","text":"<pre><code>fladle {\n// Required parameters\nserviceAccountCredentials = project.layout.projectDirectory.file(\"flank-gradle-5cf02dc90531.json\")\nvariant = \"freeDebug\"\n\n// Optional parameters\nuseOrchestrator = false\nenvironmentVariables = [\n\"clearPackageData\": \"true\"\n]\ndirectoriesToPull = [\n\"/sdcard/screenshots\"\n]\nfilesToDownload = [\n\".*/screenshots/.*\"\n]\ntestTargets = [\n\"class com.osacky.flank.gradle.sample.ExampleInstrumentedTest#seeView\"\n]\ntestTimeout = \"15m\"\nrecordVideo = false\nperformanceMetrics = false\ndevices = [\n[ \"model\": \"SmallPhone.arm\", \"version\": \"28\" ],\n[ \"model\": \"MediumPhone.arm\", \"version\": \"33\" ]\n]\nprojectId(\"flank-gradle\")\nflankVersion = \"23.10.1\"\ndebugApk = \"$buildDir/outputs/apk/debug/sample-debug.apk\"\ninstrumentationApk = \"$buildDir/outputs/apk/androidTest/debug/sample-debug-androidTest.apk\"\nadditionalTestApks = [\n\"- app:  $buildDir/outputs/apk/debug/sample-debug.apk\",\n\"  test: $buildDir/outputs/apk/androidTest/debug/sample2-debug-androidTest.apk\",\n\"- test: ${rootProject.buildDir}/database/module/outputs/apk/database-module-androidTest.apk\"\n]\nautoGoogleLogin = true\nmaxTestShards = 8 //or numUniformShards=5 cannot use both.\nshardTime = 120\nsmartFlankGcsPath = \"gs://tmp_flank/flank/test_app_android.xml\"\nconfigs {\noranges {\nuseOrchestrator.set(false)\ntestTargets.set(project.provider { [\n\"class com.osacky.flank.gradle.sample.ExampleInstrumentedTest#runAndFail\"\n] })\n}\n}\nresultsBucket(\"my-results-bucket-name\")\nkeepFilePath = true\nrunTimout = \"45m\"\nignoreFailedTests = false\ndisableSharding = false\nsmartFlankDisableUpload = false\ntestRunnerClass = \"com.foo.TestRunner\"\nlocalResultsDir = \"flank\"\nclientDetails = [\n\"key1\": \"value1\",\n\"key2\": \"value2\"\n]\ntestTargetsAlwaysRun = [\n\"com.example.TestSuite#test1\",\n\"com.example.TestSuite#test2\"\n]\notherFiles = [\n\"/sdcard/dir1/file1.txt\": \"/my/example/path/file1.txt\",\n\"/sdcard/dir2/file2.txt\": \"/my/example/path/file2.txt\"\n]\nnetworkProfile = \"LTE\"\nroboDirectives = [\n[\"click\", \"button1\", \"\"],\n[\"ignore\", \"button2\"],\n[\"text\", \"field1\", \"my text\"],\n]\noutputStyle = 'multi'\nlegacyJunitResult = false\nfullJunitResult = false\nadditionalApks = [\n\"gs://path/to/app1.apk\",\n\"localPath/to/app2.apk\"\n]\ndefaultTestTime = 5.3\ndefaultClassTestTime = 180.5\nuseAverageTestTimeForNewTests = true\ndisableResultsUpload = true\ngrantPermissions = \"none\"\ntype = \"game-loop\"\nscenarioLabels = [\n\"label1\",\n\"label2\" ]\nscenarioNumbers = [ 1, 23, 52 ]\nobbFiles = [\n\"local/file/path/test1.obb\",\n\"local/file/path/test2.obb\"\n]\nobbNames = [\n\"patch.0300110.com.example.android.obb\",\n\"patch.0300111.com.example.android.obb\"\n]\ntestTargetsForShard = [\n\"package com.package1.for.shard1, com.package2.for.shard1\",\n\"class com.foo.ClassForShard2#testMethod1, com.foo.ClassForShard2#testMethod2\",\n\"class com.foo.ClassForShard3; package com.package.for.shard3\"\n]\nfailFast = true\ndependOnAssemble = true\n}\n</code></pre>"},{"location":"configuration/#useorchestrator","title":"useOrchestrator","text":"<p>Whether or not we should use the android test orchestrator to run this tests. Set this to true when the build.gradle file includes <code>testOptions.execution 'ANDROID_TEST_ORCHESTRATOR'</code></p> Groovy <pre><code>useOrchestrator = true\n</code></pre> Kotlin <pre><code>useOrchestrator.set(true)\n</code></pre>"},{"location":"configuration/#testtargets","title":"testTargets","text":"<p>Set multiple testTargets to be run by Flank. These are used to whitelist or blacklist test classes, test cases and test annotations. See Google Cloud Firebase docs for more information.</p> Groovy <pre><code>testTargets = [\n\"class com.osacky.flank.gradle.sample.ExampleInstrumentedTest#seeView\"\n]\n</code></pre> Kotlin <pre><code>testTargets.set(listOf(\n\"class com.osacky.flank.gradle.sample.ExampleInstrumentedTest#seeView\"\n))\n</code></pre>"},{"location":"configuration/#devices","title":"devices","text":"<p>A list of devices to run the tests against. When list is empty, a default device will be used. Each device entry is a map.  The valid keys in the map are <code>model</code>, <code>version</code>, <code>orientation</code>, and <code>locale</code>.  When a key is not set or is null, a default value will be used.</p> Groovy <pre><code>devices = [\n[ \"model\": \"MediumPhone.arm\", \"version\": \"26\" ],\n[ \"model\": \"MediumPhone.arm\", \"version\": \"33\" ]\n]\n</code></pre> Kotlin <pre><code>devices.set(listOf(\nmapOf(\"model\" to \"MediumPhone.arm\", \"version\" to \"26\" ),\nmapOf(\"model\" to \"MediumPhone.arm\", \"version\" to \"33\" )\n))\n</code></pre>"},{"location":"configuration/#projectid","title":"projectId","text":"<p>The projectId is a unique identifier which can be found in the project's URL: <code>https://console.firebase.google.com/project/&lt;projectId&gt;</code> This is automatically discovered based on the service credential by default.</p> Groovy <pre><code>projectId = \"flank-gradle\"\n</code></pre> Kotlin <pre><code>projectId.set(\"flank-gradle\")\n</code></pre>"},{"location":"configuration/#flankversion","title":"flankVersion","text":"<p>Need a different Flank version? Specify it with <code>flankVersion</code>.</p> <p>To use a snapshot:</p> Groovy <pre><code>flankVersion = \"flank_snapshot\"`\n</code></pre> Kotlin <pre><code>flankVersion.set(\"flank_snapshot\")\n</code></pre> <p>Need more than 50 shards? Use Flank <code>8.1.0</code>.</p> <p>To use a different version:</p> Groovy <pre><code>flankVersion = \"23.10.1\"\n</code></pre> Kotlin <pre><code>flankVersion.set(\"23.10.1\")\n</code></pre>"},{"location":"configuration/#flankcoordinates","title":"flankCoordinates","text":"<p>Specify custom flank maven coordinates.</p> Groovy <pre><code>flankCoordinates = \"com.github.flank:flank\"\n</code></pre> Kotlin <pre><code>flankCoordinates.set(\"com.github.flank:flank\")\n</code></pre>"},{"location":"configuration/#debugapk","title":"debugApk","text":"<p>This is a string representing the path to the app's debug apk. Supports wildcard characters. Optional, prefer to set variant.</p> Groovy <pre><code>debugApk = project.provider { \"${buildDir.toString()}/outputs/apk/debug/*.apk\" }\n</code></pre> Kotlin <pre><code>debugApk.set(project.provider { \"${buildDir.toString()}/outputs/apk/debug/*.apk\" })\n</code></pre>"},{"location":"configuration/#instrumentationapk","title":"instrumentationApk","text":"<p>This is a string representing the path to the app's instrumentaiton apk. Supports wildcard characters. Optional, prefer to set variant. InstrumenationApk should not be set when using roboScript.</p> Groovy <pre><code>instrumentationApk = project.provider { \"${buildDir.toString()}/outputs/apk/androidTest/debug/*.apk\" }\n</code></pre> Kotlin <pre><code>instrumentationApk.set(project.provider { \"${buildDir.toString()}/outputs/apk/androidTest/debug/*.apk\" })\n</code></pre>"},{"location":"configuration/#additionaltestapks","title":"additionalTestApks","text":"<p>Paths to additional test configurations. Order matters. A test apk is run with the nearest previous listed app apk. For library modules, add them to the list with a <code>- test:</code> in front. For test apks which belong to an application module, add them with <code>test:</code>. It is not required to list an app apk here. If there is no app apk listed in additionalTestApks, the test apks are run against the debugApk.</p> Groovy <pre><code>additionalTestApks.value(project.provider { [\n\"- app: ../main/app/build/output/apk/debug/app.apk\",\n\"  test: ../main/app/build/output/apk/androidTest/debug/app-test.apk\",\n\"- app: ../sample/app/build/output/apk/debug/sample-app.apk\",\n\"  test: ../sample/app/build/output/apk/androidTest/debug/sample-app-test.apk\",\n\"- test: ../feature/room/build/output/apk/androidTest/debug/feature-room-test.apk\",\n\"- test: ../library/databases/build/output/apk/androidTest/debug/sample-databases-test.apk\"\n]})\n</code></pre> Kotlin <pre><code>additionalTestApks.value(project.provider { listOf(\n\"- app: ../main/app/build/output/apk/debug/app.apk\",\n\"  test: ../main/app/build/output/apk/androidTest/debug/app-test.apk\",\n\"- app: ../sample/app/build/output/apk/debug/sample-app.apk\",\n\"  test: ../sample/app/build/output/apk/androidTest/debug/sample-app-test.apk\",\n\"- test: ../feature/room/build/output/apk/androidTest/debug/feature-room-test.apk\",\n\"- test: ../library/databases/build/output/apk/androidTest/debug/sample-databases-test.apk\"\n)})\n</code></pre>"},{"location":"configuration/#autogooglelogin","title":"autoGoogleLogin","text":"<p>Whether to automatically log in using a preconfigured google account. More Info</p> Groovy <pre><code>autoGoogleLogin = false\n</code></pre> Kotlin <pre><code>autoGoogleLogin.set(false)\n</code></pre>"},{"location":"configuration/#environmentvariables","title":"environmentVariables","text":"<p>Environment variables are mirrored as extra options to the <code>am instrument -e KEY1 VALUE1 \u2026</code> command and passed to your test runner (typically AndroidJUnitRunner). Examples</p> Groovy <pre><code>environmentVariables = [\n// Whether or not to remove all shared state from your device's CPU and memory after each test. [More info](https://developer.android.com/training/testing/junit-runner)\n\"clearPackageData\": \"true\"\n]\n</code></pre> Kotlin <pre><code>environmentVariables = mapOf(\n// Whether or not to remove all shared state from your device's CPU and memory after each test. [More info](https://developer.android.com/training/testing/junit-runner)\n\"clearPackageData\" to \"true\"\n)\n</code></pre>"},{"location":"configuration/#testshards","title":"testShards","text":"<p>Deprecated</p> <p>Use <code>maxTestShards</code> instead.</p> <p>The maximum number of shards. Fladle will throw an error when used together with maxTestShards or numUniformShards. </p> Groovy <pre><code>testShards = 5\n</code></pre> Kotlin <pre><code>testShards.set(5)\n</code></pre>"},{"location":"configuration/#maxtestshards","title":"maxTestShards","text":"<p>The maximum number of shards. Fladle will throw an error when used together with testShards or numUniformShards.</p> Groovy <pre><code>maxTestShards = 8\n</code></pre> Kotlin <pre><code>maxTestShards.set(8)\n</code></pre>"},{"location":"configuration/#shardtime","title":"shardTime","text":"<p>The amount of time tests within a shard should take. When set to &gt; 0, the shard count is dynamically set based on time up to the maximum limit defined by maxTestShards 2 minutes (120) is recommended. default: -1 (unlimited)</p> Groovy <pre><code>shardTime = 120\n</code></pre> Kotlin <pre><code>shardTime.set(120)\n</code></pre>"},{"location":"configuration/#repeattests","title":"repeatTests","text":"<p>The number of times to repeat each test. Uses Flank's default value when not specified.</p> Groovy <pre><code>repeatTests = 1\n</code></pre> Kotlin <pre><code>repeatTests.set(1)\n</code></pre>"},{"location":"configuration/#configs","title":"configs","text":"<p>Give a name to a custom flank task and configure its options. The name is appended to the end of the flank task. For example <code>runFlank</code> becomes <code>runFlank&lt;name&gt;</code>.</p> Groovy <pre><code>configs {\nrepeatOneHundred {\n// DSL sugar for container elements is missing (= syntax): https://github.com/gradle/gradle/issues/9987\nrepeatTests.set(100)\n}\n}\n</code></pre> Kotlin <pre><code>configs {\ncreate(\"repeatOneHundred\") {\nrepeatTests.set(100)\n}\n}\n</code></pre> <p>In the above example, the configuration is inherited from the outer fladle config but with the repeatTests property set to 100. Running <code>runFlankRepeateOneHundred</code> will execute this custom configuration.</p>"},{"location":"configuration/#smartflankgcspath","title":"smartFlankGcsPath","text":"<p>The cloud storage location for historical test runs. This must be set in order to use smart sharding. The amount of shards used is set by <code>maxTestShards</code>. The bucket (such as <code>flank_data</code> in the example) must already exist in order for it to be used.</p> Groovy <pre><code>smartFlankGcsPath = 'gs://flank_data/results/JUnitReport.xml'\n</code></pre> Kotlin <pre><code>smartFlankGcsPath.set(\"gs://flank_data/results/JUnitReport.xml\")\n</code></pre>"},{"location":"configuration/#resultshistoryname","title":"resultsHistoryName","text":"<p>The history name for your test results (an arbitrary string label; default: the application's label from the APK manifest). All tests which use the same history name will have their results grouped together in the Firebase console in a time-ordered test history list.</p> Groovy <pre><code>resultsHistoryName = 'android-history'\n</code></pre> Kotlin <pre><code>resultsHistoryName.set(\"android-history\")\n</code></pre>"},{"location":"configuration/#flakytestattempts","title":"flakyTestAttempts","text":"<p>The number of times to retry failed tests. Default is 0. Max is 10. Setting the value to 1 will mean that test are retried once. If the test fails then succeeds after the retry the run will be marked as \"successful\". The matrix with a flaky test will be marked as flaky.</p> Groovy <pre><code>flakyTestAttempts = 0\n</code></pre> Kotlin <pre><code>flakyTestAttempts.set(0)\n</code></pre>"},{"location":"configuration/#abi","title":"abi","text":"<p>The ABI split of the application that should be tested (e.g. \"x86\"). Only required if the application under test uses ABI splits and the debug APK is selected automatically (via variant) instead of manually (via debugApk).</p> <p>If the application uses ABI splits, and this property isn't specified, an arbitrary ABI split will be selected.</p> Groovy <pre><code>abi = \"arm64-v8a\"\n</code></pre> Kotlin <pre><code>abi.set(\"arm64-v8a\")\n</code></pre>"},{"location":"configuration/#directoriestopull","title":"directoriesToPull","text":"<p>A list of paths that will be copied from the device's storage to the designated results bucket after the test is complete. These must be absolute paths under <code>/sdcard</code> or <code>/data/local/tmp</code>.  Path names are restricted to the characters <code>a-zA-Z0-9_-./+</code>. The paths <code>/sdcard</code> and <code>/data</code> will be made available and treated as implicit path substitutions. E.g. if <code>/sdcard</code> on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.</p> Groovy <pre><code>directoriesToPull = [\n'/sdcard/tempDir1', '/data/local/tmp/tempDir2'\n]\n</code></pre> Kotlin <pre><code>directoriesToPull.set(listOf(\n\"/sdcard/tempDir1\", \"/data/local/tmp/tempDir2\"\n))\n</code></pre>"},{"location":"configuration/#filestodownload","title":"filesToDownload","text":"<p>List of regex that is matched against bucket paths (for example: <code>2019-01-09_00:13:06.106000_YCKl/shard_0/SmallPhone.arm-28-en-portrait/bugreport.txt</code>) for files to be downloaded after a flank run. The results are downloaded to the <code>APP_MODULE/build/fladle/RESULTS</code> directory where RESULTS can be set by <code>localResultsDir</code> var otherwise defaulting to <code>results/</code>.</p> Groovy <pre><code>filesToDownload = [\n'.*/sdcard/tempDir1/.*', '.*/data/local/tmp/tempDir2/.*'\n]\n</code></pre> Kotlin <pre><code>filesToDownload.set(listOf(\n\".*/sdcard/tempDir1/.*\", \".*/data/local/tmp/tempDir2/.*\"\n))\n</code></pre>"},{"location":"configuration/#testtimeout","title":"testTimeout","text":"<p>The max time test execution can run before it is cancelled (default: 15m). It does not include any time necessary to prepare and clean up the target device. The maximum possible testing time is 45m on physical devices and 60m on virtual devices. The TIMEOUT units can be h, m, or s. If no unit is given, seconds are assumed. Examples: * 1h   -&gt; 1 hour * 5m   -&gt; 5 minutes * 200s -&gt; 200 seconds * 100  -&gt; 100 seconds</p> Groovy <pre><code>testTimeout = \"1h\"\n</code></pre> Kotlin <pre><code>testTimeout.set(\"1h\")\n</code></pre>"},{"location":"configuration/#recordvideo","title":"recordVideo","text":"<p>Enable video recording during the test. Enabled by default.</p> Groovy <pre><code>recordVideo = true\n</code></pre> Kotlin <pre><code>recordVideo.set(true)\n</code></pre>"},{"location":"configuration/#performancemetrics","title":"performanceMetrics","text":"<p>Monitor and record performance metrics: CPU, memory, network usage, and FPS (game-loop only). Enabled by default.</p> Groovy <pre><code>performanceMetrics = true\n</code></pre> Kotlin <pre><code>performanceMetrics.set(true)\n</code></pre>"},{"location":"configuration/#resultsbucket","title":"resultsBucket","text":"<p>The name of a Google Cloud Storage bucket where raw test results will be stored.</p> Groovy <pre><code>resultsBucket = \"my-gcs-bucket-name\"\n</code></pre> Kotlin <pre><code>resultsBucket.set(\"my-gcs-bucket-name\")\n</code></pre>"},{"location":"configuration/#keepfilepath","title":"keepFilePath","text":"<p>Keeps the full path of downloaded files from a Google Cloud Storage bucket. Required when file names are not unique. Disabled by default.</p> Groovy <pre><code>keepFilePath = false\n</code></pre> Kotlin <pre><code>keepFilePath.set(false)\n</code></pre>"},{"location":"configuration/#resultsdir","title":"resultsDir","text":"<p>The name of a unique Google Cloud Storage object within the results bucket where raw test results will be stored. The default is a timestamp with a random suffix.</p> Groovy <pre><code>resultsDir = \"result-dir-${getTimeStamp()}\"\n</code></pre> Kotlin <pre><code>resultsDir.set(\"result-dir-${getTimeStamp()}\")\n</code></pre>"},{"location":"configuration/#disablesharding","title":"disableSharding","text":"<p>Disables sharding. All tests will run on the same device. Useful for parameterized tests which do not support sharding. (default: false)</p> Groovy <pre><code>disableSharding = false\n</code></pre> Kotlin <pre><code>disableSharding.set(false)\n</code></pre>"},{"location":"configuration/#smartflankdisableupload","title":"smartFlankDisableUpload","text":"<p>Disables smart flank JUnit XML uploading. Useful for preventing timing data from being updated. (default: false) What is Smart Flank?</p> Groovy <pre><code>smartFlankDisableUpload = false\n</code></pre> Kotlin <pre><code>smartFlankDisableUpload.set(false)\n</code></pre>"},{"location":"configuration/#testrunnerclass","title":"testRunnerClass","text":"<p>The fully-qualified Java class name of the instrumentation test runner (default: the test manifest is parsed to determine the class name).</p> Groovy <pre><code>testRunnerClass = \"com.example.MyCustomTestRunner\"\n</code></pre> Kotlin <pre><code>testRunnerClass.set(\"com.example.MyCustomTestRunner\")\n</code></pre>"},{"location":"configuration/#localresultsdir","title":"localResultsDir","text":"<p>The local directory to store the test results. Folder is DELETED before each run to ensure only artifacts from the new run are saved. This directory is relative to the working directory of Flank which is by default <code>build/fladle</code> or <code>build/fladle/&lt;flavorname&gt;</code>.</p> Groovy <pre><code>localResultsDir = \"my-results-dir\"\n</code></pre> Kotlin <pre><code>localResultsDir.set(\"my-results-dir\")\n</code></pre>"},{"location":"configuration/#testtargetsalwaysrun","title":"testTargetsAlwaysRun","text":"<p>Always run - these tests are inserted at the beginning of every shard. Useful if you need to grant permissions or login before other tests run</p> Groovy <pre><code>testTargetsAlwaysRun = [\n'class com.example.MyTestClass'\n]\n</code></pre> Kotlin <pre><code>testTargetsAlwaysRun.set(listOf(\n\"class com.example.MyTestClass\"\n))\n</code></pre> <p>The flags below are only available with Flank 20.05.0 or higher.</p>"},{"location":"configuration/#runtimeout","title":"runTimeout","text":"<p>The max time this test run can execute before it is cancelled. s (seconds), m (minutes), h (hours) suffixes are acceptable, mixes like 1h45m are currently not supported (default: unlimited). Examples:</p> <ul> <li>20, 20s -&gt; 20 seconds</li> <li>30m -&gt; 30 minutes</li> <li>2h -&gt; 2 hours</li> </ul> Groovy <pre><code>runTimeout = \"15m\"\n</code></pre> Kotlin <pre><code>runTimeout.set(\"15m\")\n</code></pre>"},{"location":"configuration/#ignorefailedtests","title":"ignoreFailedTests","text":"<p>Always return successful task completion even when there are failed tests. Useful when parsing JUnit XML to determine failure. (default: false)</p> Groovy <pre><code>ignoreFailedTests = false\n</code></pre> Kotlin <pre><code>ignoreFailedTests.set(false)\n</code></pre>"},{"location":"configuration/#numuniformshards","title":"numUniformShards","text":"<p>Specifies the number of shards into which you want to evenly distribute test cases. The shards are run in parallel on separate devices. For example, if your test execution contains 20 test cases and you specify four shards, each shard executes five test cases. The number of shards should be less than the total number of test cases. The number of shards specified must be &gt;= 1 and &lt;= 50. This option cannot be used along maxTestShards and is not compatible with smart sharding (Smart Flank). If you want to take benefits of smart sharding use maxTestShards instead. (default: null)</p> Groovy <pre><code>numUniformShards = 50\n</code></pre> Kotlin <pre><code>numUniformShards.set(50)\n</code></pre>"},{"location":"configuration/#clientdetails","title":"clientDetails","text":"<p>A key-value map of additional details to attach to the test matrix.(clientDetails in Google Cloud Docs) Arbitrary key-value pairs may be attached to a test matrix to provide additional context about the tests being run. When consuming the test results, such as in Cloud Functions or a CI system, these details can add additional context such as a link to the corresponding pull request. (Access Client Details). These can be used to provide additional context about the environment where the tests are being run.</p> Groovy <pre><code>clientDetails = [\n\"test-type\": \"PR\",\n\"build-number\": \"132\"\n]\n</code></pre> Kotlin <pre><code>clientDetails.set(mapOf(\n\"test-type\" to \"PR\",\n\"build-number\" to \"132\"\n))\n</code></pre>"},{"location":"configuration/#otherfiles","title":"otherFiles","text":"<p>A list of device-path: file-path pairs that indicate the device paths to push files to the device before starting tests, and the paths of files to push. Device paths must be under absolute, whitelisted paths (${EXTERNAL_STORAGE}, or ${ANDROID_DATA}/local/tmp). Source file paths may be in the local filesystem or in Google Cloud Storage (gs://\u2026).</p> Groovy <pre><code>otherFiles = [\n\"/sdcard/dir1/file1.txt\": \"local/file.txt\",\n\"/sdcard/dir2/file2.jpg\": \"gs://bucket/file.jpg\",\n]\n</code></pre> Kotlin <pre><code>otherFiles.set(mapOf(\n\"/sdcard/dir1/file1.txt\" to \"local/file.txt\",\n\"/sdcard/dir2/file2.jpg\" to \"gs://bucket/file.jpg\",\n))\n</code></pre>"},{"location":"configuration/#networkprofile","title":"networkProfile","text":"<p>The name of the network traffic profile, for example LTE, HSPA, etc, which consists of a set of parameters to emulate network conditions when running the test (default: no network shaping; see available profiles listed by the <code>flank test network-profiles list</code> command). This feature only works on physical devices.</p> Groovy <pre><code>networkProfile = \"LTE\"\n</code></pre> Kotlin <pre><code>networkProfile.set(\"LTE\")\n</code></pre>"},{"location":"configuration/#roboscript","title":"roboScript","text":"<p>The path to a Robo Script JSON file. The path may be in the local filesystem or in Google Cloud Storage using gs:// notation. You can guide the Robo test to perform specific actions by recording a Robo Script in Android Studio and then specifying this argument. Learn more at DOCS.</p> Groovy <pre><code>roboScript = \"my-robo-script.json\"\n</code></pre> Kotlin <pre><code>roboScript.set(\"my-robo-script.json\")\n</code></pre>"},{"location":"configuration/#robodirectives","title":"roboDirectives","text":"<p>List of robo_directives that you can use to customize the behavior of Robo test. The type specifies the action type of the directive, which may take on values click, text or ignore. Each directive is list of String = [type, key, value]. Each key should be the Android resource name of a target UI element and each value should be the text input for that element. Values are only permitted for text type elements, so no value should be specified for click and ignore type elements.</p> Groovy <pre><code>roboDirectives = [\n[\"test, \"input_resource_name\", \"message\"],\n    [\"click, \"button_resource_name\", \"\"],\n]\n</code></pre> Kotlin <pre><code>roboDirectives.set(listOf(\nlistOf(\"test\", \"input_resource_name\", \"message\"),\nlistOf(\"click\", \"button_resource_name\", \"\"),\n))\n</code></pre>"},{"location":"configuration/#outputstyle","title":"outputStyle","text":"<p>Output style of execution status. May be one of [<code>verbose</code>, <code>multi</code>, <code>single</code>]. For runs with only one test execution the default value is 'verbose', in other cases 'multi' is used as the default. The output style 'multi' is not displayed correctly on consoles which don't support ANSI codes, to avoid corrupted output use single or verbose.</p> <p><code>multi</code> displays separated status for each shard execution in separated line, lines are updated over time. Similar to gradle output when running multiple tasks in parallel. Requires ANSI codes support.</p> <p><code>single</code> displays shortened status of all executions in single line. Similar to gcloud output when running with sharding. Should work on any console.</p> <p>Default value is single.</p> Groovy <pre><code>outputSyle = \"single\"\n</code></pre> Kotlin <pre><code>outputStyle.set(\"single\")\n</code></pre>"},{"location":"configuration/#legacyjunitresult","title":"legacyJunitResult","text":"<p>Flank provides two ways for parsing junit xml results. New way uses google api instead of merging xml files, but can generate slightly different output format. This flag allows fallback for legacy xml junit results parsing</p> Groovy <pre><code>legacyJunitResult = false\n</code></pre> Kotlin <pre><code>legacyJunitResult.set(false)\n</code></pre>"},{"location":"configuration/#fulljunitresult","title":"fullJunitResult","text":"<p>Enables creating an additional local junit result on local storage with failure nodes on passed flaky tests.</p> Groovy <pre><code>fullJunitResult = false\n</code></pre> Kotlin <pre><code>fullJunitResult.set(false)\n</code></pre>"},{"location":"configuration/#sanityrobo","title":"sanityRobo","text":"<p>Runs a sanityRobo test. <code>instrumentationApk</code>, <code>roboDirectives</code>, <code>roboScript</code> and <code>additionalTestApks</code> must be blank or empty.</p> Groovy <pre><code>sanityRobo = true\n</code></pre> Kotlin <pre><code>sanityRobo.set(true)\n</code></pre>"},{"location":"configuration/#defaulttesttime","title":"defaultTestTime","text":"<p>Set default test time expressed in seconds, used for calculating shards. (default: 120.0s)</p> Groovy <pre><code>defaultTestTime = 1.2\n</code></pre> Kotlin <pre><code>defaultTestTime.set(1.2)\n</code></pre>"},{"location":"configuration/#defaultclasstesttime","title":"defaultClassTestTime","text":"<p>Set default parameterized class test time expressed in seconds, used for calculating shards. (default: 2x defaultTestTime =&gt; 240s)</p> Groovy <pre><code>defaultClassTestTime = 245.5\n</code></pre> Kotlin <pre><code>defaultClassTestTime.set(245,5)\n</code></pre>"},{"location":"configuration/#additionalapks","title":"additionalApks","text":"<p>A list of up to 100 additional APKs to install, in addition to those being directly tested. The path may be in the local filesystem or in Google Cloud Storage using gs:// notation.</p> Groovy <pre><code>additionalApks = [\n\"gs://path/to/app1.apk\",\n\"localPath/to/app2.apk\"\n]\n</code></pre> Kotlin <pre><code>additionalApks.set(\nproject.provider {\nlistOf(\"gs://path/to/app1.apk\", \"localPath/to/app2.apk\")\n}\n)\n</code></pre>"},{"location":"configuration/#useaveragetesttimefornewtests","title":"useAverageTestTimeForNewTests","text":"<p>Enable using average time from previous tests duration when using SmartShard and tests did not run before. (default: false)</p> Groovy <pre><code>useAverageTestTimeForNewTests = true\n</code></pre> Kotlin <pre><code>useAverageTestTimeForNewTests.set(true)\n</code></pre>"},{"location":"configuration/#disableresultsupload","title":"disableResultsUpload","text":"<p>Disable flank results upload on gcloud storage. (default: false)</p> Groovy <pre><code>disableResultsUpload = true\n</code></pre> Kotlin <pre><code>disableResultsUpload.set(true)\n</code></pre>"},{"location":"configuration/#testtargetsforshard","title":"testTargetsForShard","text":"<p>Specifies a group of packages, classes, and/or test cases to run in each shard (a group of test cases). The shards are run in parallel on separate devices. You can use this option up to 50 times to specify multiple shards when one or more physical devices are selected, or up to 500 times when no physical devices are selected. Note: If you include the flags <code>environmentVariables</code> or <code>testTargets</code> when running <code>testTargetsForShard</code>, the flags are applied to all the shards you create. You can also specify multiple packages, classes, or test cases in the same shard by separating each item with a comma. To specify both package and class in the same shard, separate package and class with semi-colons.</p> Groovy <pre><code>testTargetsForShard = [\n  \"package com.package1.for.shard1, com.package2.for.shard1\",\n  \"class com.foo.ClassForShard2#testMethod1, com.foo.ClassForShard2#testMethod2\",\n  \"class com.foo.ClassForShard3; package com.package.for.shard3\"\n  ]\n</code></pre> Kotlin <pre><code>testTargetsForShard.set(\n  project.provider {\n    listOf(\n      \"package com.package1.for.shard1, com.package2.for.shard1\",\n      \"class com.foo.ClassForShard2#testMethod1, com.foo.ClassForShard2#testMethod2\",\n      \"class com.foo.ClassForShard3; package com.package.for.shard3\"\n    )\n  }\n)\n</code></pre>"},{"location":"configuration/#grantpermissions","title":"grantPermissions","text":"<p>Whether to grant runtime permissions on the device before the test begins. By default, all permissions are granted. PERMISSIONS must be one of: all, none</p> Groovy <pre><code>grantPermissions = \"none\"\n</code></pre> Kotlin <pre><code>grantPermissions.set(\"none\")\n</code></pre>"},{"location":"configuration/#type","title":"type","text":"<p>The type of test to run. TYPE must be one of: instrumentation, robo, game-loop. Use if you want to be sure there is only one type of tests being run (flank enables to run mixed types of test in one run).</p> Groovy <pre><code>type = \"game-loop\"\n</code></pre> Kotlin <pre><code>type.set(\"game-loop\")\n</code></pre>"},{"location":"configuration/#scenariolabels","title":"scenarioLabels","text":"<p>A list of game-loop scenario labels (default: None). Each game-loop scenario may be labeled in the APK manifest file with one or more arbitrary strings, creating logical groupings (e.g. GPU_COMPATIBILITY_TESTS). If <code>--scenario-numbers</code> and <code>--scenario-labels</code> are specified together, Firebase Test Lab will first execute each scenario from <code>--scenario-numbers</code>. It will then expand each given scenario label into a list of scenario numbers marked with that label, and execute those scenarios.</p> Groovy <pre><code>scenarioLabels = [\n\"label1\",\n\"label2\" ]\n</code></pre> Kotlin <pre><code>scenarioLabels.set(\nproject.provider {\nlistOf(\"label1\", \"label2\")\n}\n)\n</code></pre>"},{"location":"configuration/#scenarionumbers","title":"scenarioNumbers","text":"<p>A list of game-loop scenario numbers which will be run as part of the test (default: all scenarios). A maximum of 1024 scenarios may be specified in one test matrix, but the maximum number may also be limited by the overall test <code>--timeout</code> setting.</p> Groovy <pre><code>scenarioNumbers = [ 1, 23, 52 ]\n</code></pre> Kotlin <pre><code>scenarioNumbers.set(\nproject.provider {\nlistOf(1, 23, 52)\n}\n)\n</code></pre>"},{"location":"configuration/#obbfiles","title":"obbFiles","text":"<p>A list of one or two Android OBB file names which will be copied to each test device before the tests will run (default: None). Each OBB file name must conform to the format as specified by Android (e.g. <code>[main|patch].0300110.com.example.android.obb</code>) and will be installed into <code>&lt;shared-storage&gt;/Android/obb/&lt;package-name&gt;/</code> on the test device.</p> Groovy <pre><code>obbFiles = [\n\"local/file/path/test1.obb\",\n\"local/file/path/test2.obb\"\n]\n</code></pre> Kotlin <pre><code>obbFiles.set(\nproject.provider {\nlistOf(\n\"local/file/path/test1.obb\",\n\"local/file/path/test2.obb\"\n)\n}\n)\n</code></pre>"},{"location":"configuration/#obbnames","title":"obbNames","text":"<p>A list of OBB required filenames. OBB file name must conform to the format as specified by Android e.g. <code>[main|patch].0300110.com.example.android.obb</code> which will be installed into <code>&lt;shared-storage&gt;/Android/obb/&lt;package-name&gt;/</code> on the device.</p> Groovy <pre><code>obbNames = [\n\"patch.0300110.com.example.android.obb\",\n\"patch.0300111.com.example.android.obb\"\n]\n</code></pre> Kotlin <pre><code>obbNames.set(\nproject.provider {\nlistOf(\n\"patch.0300110.com.example.android.obb\",\n\"patch.0300111.com.example.android.obb\"\n)\n}\n)\n</code></pre>"},{"location":"configuration/#failfast","title":"failFast","text":"<p>If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.</p> Groovy <pre><code>failFast = true\n</code></pre> Kotlin <pre><code>failFast.set(true)\n</code></pre>"},{"location":"configuration/#additionalflankoptions","title":"additionalFlankOptions","text":"<p>Appending additional option to flank root yaml. This option is useful when you would like to test options before official fladle support is added. Multiple options are supported.</p> <p>Single option</p> Groovy <pre><code>additionalFlankOptions = \"new-property: true\"\n</code></pre> Kotlin <pre><code>additionalFlankOptions.set(\"new-property: true\")\n</code></pre> <p>Multiple options</p> Groovy <pre><code>additionalFlankOptions = \"\"\"\n  new-property: true\n  other-new-property: force\n\"\"\".stripIndent()\n</code></pre> Kotlin <pre><code>additionalFlankOptions.set(\"\"\"\n    new-property: true\n    other-new-property: force\n\"\"\".trimIndent())\n</code></pre>"},{"location":"configuration/#additionalgcloudoptions","title":"additionalGcloudOptions","text":"<p>Allow appending additional config to gcloud root yaml. This option is useful when you would like to test option before it is available on Fladle. Supports both single and multiple properties.</p> <p>Single option</p> Groovy <pre><code>additionalGcloudOptions = \"new-property: true\"\n</code></pre> Kotlin <pre><code>additionalGcloudOptions.set(\"new-property: true\")\n</code></pre> <p>Multiple options</p> Groovy <pre><code>additionalGcloudOptions = \"\"\"\n    new-property: true\n    other-new-property: force\n  \"\"\".stripIndent()\n</code></pre> Kotlin <pre><code>additionalGcloudOptions.set(\"\"\"\n    new-property: true\n    other-new-property: force\n\"\"\".trimIndent())\n</code></pre>"},{"location":"configuration/#dependonassemble","title":"dependOnAssemble","text":"<p>Enable to automatically build the app and test APKs before <code>runFlank</code> executes. (default: <code>false</code>)</p> Groovy <pre><code>dependOnAssemble = true\n</code></pre> Kotlin <pre><code>dependOnAssemble.set(true)\n</code></pre>"},{"location":"configuration/#async","title":"async","text":"<p>Enable to return immediately after invoking tests, without waiting for results. (default: <code>false</code>)</p> Groovy <pre><code>async = true\n</code></pre> Kotlin <pre><code>async.set(true)\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#error-apk-file-not-found","title":"Error APK file not found","text":"<p>The app APK and the instrumentation APK are expected to have already been generated before calling runFlank. To generate APKs, run <code>assembleDebug</code> and <code>assembleDebugAndroidTest</code> before running <code>runFlank</code>. </p> <p>You can also have Fladle build them for you by using the <code>dependOnAssemble</code> property.</p>"},{"location":"faq/#no-signature-of-method","title":"No signature of method","text":"<p>If you receive an error like this, it is likely caused by invalid fladle extension confiuration. The syntax was changed in the <code>0.9.X</code> releases in order to avoid touching files during the configuration phase. <pre><code>No signature of method: flank_4vvjv7w3oopge32w1tl9cs6e4.fladle() is applicable for argument types: (flank_4vvjv7w3oopge32w1tl9cs6e4$_run_closure1) values: [flank_4vvjv7w3oopge32w1tl9cs6e4$_run_closure1@649a2315]\nPossible solutions: file(java.lang.Object), find(), findAll(), file(java.lang.Object, org.gradle.api.PathValidation), files([Ljava.lang.Object;), findAll(groovy.lang.Closure)\n</code></pre></p> <p>If you receive a similar error, please check configuration for a sample configuration.</p>"},{"location":"faq/#debugging","title":"Debugging","text":"<p><code>./gradlew runFlank -PdumpShards</code> Will dump shards and exit the process without running the tests.</p> <p><code>./gradlew printYml</code> Will print out the current yaml configuration to be passed to Flank.</p>"},{"location":"faq/#more-help","title":"More help?","text":"<p>Still having trouble? Check the #flank channel in the Firebase Community Slack</p>"},{"location":"multi-module-testing/","title":"Multi-module testing","text":"<p>Multi module testing can be done by manually specifying additionalTestApks or applying the Fulladle plugin to automacally gather all the additional test apks. See also this article for a full setup and instructions including integration with CI.</p>"},{"location":"multi-module-testing/#fulladle-plugin","title":"Fulladle Plugin","text":"<ol> <li> <p>Apply the Fulladle plugin at the root of the project.</p> Groovy <pre><code>plugins {\nid 'com.osacky.fulladle' version '0.19.0'\n}\n</code></pre> Kotlin <pre><code>plugins {\nid(\"com.osacky.fulladle\") version \"0.19.0\"\n}\n</code></pre> </li> <li> <p>Configure the Fladle extension.</p> Groovy <pre><code>fladle {\nserviceAccountCredentials = project.layout.projectDirectory.file(\"flank-gradle-service-account.json\")\n}\n</code></pre> Kotlin <pre><code>fladle {\nserviceAccountCredentials.set(project.layout.projectDirectory.file(\"flank-gradle-service-account.json\"))\n}\n</code></pre> <p>Warning</p> <p>If using buildFlavors or testing against a non default variant, you will need to specify the variant you want to test in the fulladleModuleConfig block.</p> </li> <li> <p>Run the tests.     First assemble all your debug apks and test apks.     <pre><code>./gradlew assembleDebug assembleDebugAndroidTest\n</code></pre></p> <p>Note</p> <p>When using flavors, make sure to assemble your buildVariants as well.</p> <p><code>./gradlew :app:assembleFreeDebug :app:assembleFreeDebugAndroidTest</code></p> <p>Run Flank! <pre><code>./gradlew runFlank\n</code></pre></p> </li> </ol>"},{"location":"multi-module-testing/#overriding-configurations-in-modules","title":"Overriding configurations in modules","text":"<p>Fulladle will pick Flank configurations from the <code>fladle</code> block in the root <code>build.gradle</code> file. You may want to override some of these configurations for certain modules, you can add the following block to any Android library module to override its configurations:</p> Groovy <pre><code>fulladleModuleConfig {\nclientDetails = [\n\"test-type\": \"PR\",\n\"build-number\": \"132\"\n]\nmaxTestShards = 3\nenvironmentVariables = [\n\"clearPackageData\": \"true\"\n]\ndebugApk = \"app.apk\"\nvariant = \"vanillaDebug\"\n}\n</code></pre> Kotlin <pre><code>fulladleModuleConfig {\nclientDetails.set(mapOf(\n\"test-type\" to \"PR\",\n\"build-number\" to \"132\",\n))\nmaxTestShards.set(3)\nenvironmentVariables.set(mapOf(\n\"clearPackageData\" to \"true\"\n))\ndebugApk.set(\"app.apk\")\nvariant.set(\"vanillaDebug\")\n}\n</code></pre> <p>All of the above configurations are optional, Flank will default to the top-level configurations if you don't override anything here. For details about these configurations, refer to configuration docs.</p>"},{"location":"multi-module-testing/#disabling-a-module","title":"Disabling a module","text":"<p>You may want to exclude a library module from testing when using Fulladle. You can do so by setting the <code>enabled</code> configuration in the module's <code>fulladleModuleConfig</code> block like so:</p> Groovy <pre><code>fulladleModuleConfig {\nenabled = false\n}\n</code></pre> Kotlin <pre><code>fulladleModuleConfig {\nenabled.set(false)\n}\n</code></pre>"},{"location":"multi-module-testing/#overriding-root-level-config","title":"Overriding root-level config","text":"<p>Fulladle does not provide the ability to control which module ends up as the root-level module or as an additional module. Either one of app modules or library modules can become a root-level module. If a library module ends up as a root-level module, it needs to specify a <code>debugApk</code> in its <code>fladle</code> or <code>fulladleModuleConfig</code> block.</p> <p>The root-level configuration (e.g. <code>maxTestShards</code>) can also be overridden in the <code>fulladleModuleConfig</code> block of whatever module gets picked as the root module.</p>"},{"location":"multi-module-testing/#troubleshooting","title":"Troubleshooting","text":"<p>Fulladle might still have some rough edges, but we'd love feedback. Please join us in the Firebase Community Slack with any feedback you may have. You can also file Fladle Github issues.</p> <p>When filing a bug report, please include the Flank version number, the Fladle version number and the output of the following:</p> <p><code>./gradlew printYml</code></p> <p><code>./gradlew runFlank -PdumpShards</code></p>"},{"location":"quick-start/","title":"Quick Start","text":"<p>Using Fladle takes 3 steps:</p> <ol> <li> <p>Apply the Fladle plugin. Follow instructions here</p> <p>Root <code>build.gradle</code></p> Groovy <pre><code>buildscript {\ndependencies {\nclasspath \"com.osacky.flank.gradle:fladle:0.19.0\"\n}\n}\n</code></pre> Kotlin <pre><code>buildscript {\ndependencies {\nclasspath(\"com.osacky.flank.gradle:fladle:0.19.0\")\n}\n}\n</code></pre> <p>Application module <code>build.gradle</code></p> Groovy <pre><code>apply plugin: \"com.android.application\"\napply plugin: \"com.osacky.fladle\"\n</code></pre> Kotlin <pre><code>plugins {\nid (\"com.android.application\")\nid (\"com.osacky.fladle\")\n}\n</code></pre> </li> <li> <p>Configure Authentication using these steps.</p> <p>Warning</p> <p>If using buildFlavors or testing against a non default variant, variant must also configured</p> </li> <li> <p>Run your tests!</p> <p>First assemble your debug apk and test apk. <pre><code>./gradlew :app:assembleDebug :app:assembleDebugAndroidTest\n</code></pre></p> <p>Note</p> <p>When using flavors, make sure to assemble your buildVariants.</p> <p><code>./gradlew :app:assembleFreeDebug :app:assembleFreeDebugAndroidTest</code></p> <p>Run Flank! <pre><code>./gradlew runFlank\n</code></pre></p> </li> </ol>"},{"location":"recipes/","title":"Recipes","text":"<p>Here are some recipes to use to achieve various goals in flank. For additional recipes or suggestions, please file an issue on Github.</p>"},{"location":"recipes/#smartly-shard-tests-in-120-second-shards-across-a-maximum-of-50-shards","title":"Smartly shard tests in 120 second shards across a maximum of 50 shards.","text":"<p>This recipe will keep track of test durations automatically on firebase test lab and try to split up test runs in to 120 second shards up to maximum of 50 shards.</p> Groovy <pre><code>fladle {\nmaxTestShards = 50\nshardTime = 120\nsmartFlankGcsPath = \"gs://fladle-results/smart-flank/JUnitReport.xml\"\n}\n</code></pre> Kotlin <pre><code>fladle {\nmaxTestShards.set(50)\nshardTime.set(120)\nsmartFlankGcsPath.set(\"gs://fladle-results/smart-flank/JUnitReport.xml\")\n}\n</code></pre>"},{"location":"recipes/#run-different-tests-on-different-devices-with-different-gradle-tasks","title":"Run different tests on different devices with different Gradle tasks.","text":"<p><code>./gradlew runFlankPerfTests</code> will execute the performance tests against a MediumPhone.arm <code>./gradlew runFlankRegresssionTests</code> will execute the regressions tests against a SmallPhone.arm</p> Groovy <pre><code>fladle {\nconfigs {\nperfTests {\ndevices.set([\n[\"model\" : \"MediumPhone.arm\", \"version\" : \"28\"], [\"model\" : \"MediumPhone.arm\", \"version\" : \"28\"]\n])\ntestTargets.set([\n\"class com.sample.MyPerformanceTest\"\n])\n}\nregressionTests {\ndevices.set([\n[ \"model\" : \"SmallPhone.arm\", \"version\" : \"28\"]\n])\ntestTargets.set([\n\"class com.sample.MyRegressionTest\"\n])\n}\n}\n}\n</code></pre> Kotlin <pre><code>fladle {\nconfigs {\ncreate(\"perfTests\") {\ndevices.set(listOf(\nmapOf(\"model\" to \"MediumPhone.arm\", \"version\" to \"28\" ), mapOf(\"model\" to \"MediumPhone.arm\", \"version\" to \"28\")\n))\ntestTargets.set(listOf(\n\"class com.sample.MyPerformanceTest\"\n))\n}\ncreate(\"regressionTests\") {\ndevices.set(listOf(\nmapOf(\"model\" to \"SmallPhone.arm\", \"version\" to \"28\" )\n))\ntestTargets.set(listOf(\n\"class com.sample.MyRegressionTest\"\n))\n}\n}\n}\n</code></pre>"},{"location":"recipes/#always-use-the-latest-version-of-flank","title":"Always use the latest version of Flank","text":"<p>Use Gradle's dynamic version syntax to declare a dynamic version.</p> <p>Warning</p> <p>Dynamic versions lead to non-reproducible builds since Gradle will check for new versions periodically based on how long versions are cached.</p> Groovy <pre><code>flankVersion = \"23.+\"\n</code></pre> Kotlin <pre><code>flankVersion.set(\"23.+\")\n</code></pre>"},{"location":"releasing/","title":"Releasing","text":"<ul> <li> <p>Create a local release branch from <code>master</code> <pre><code>git checkout master\ngit pull\ngit checkout -b release_0.19.1\n</code></pre></p> </li> <li> <p>Update <code>version</code> in <code>fladle-plugin/build.gradle.kts</code> (remove <code>-SNAPSHOT</code>) <pre><code>version = \"0.19.1\"\n</code></pre></p> </li> <li> <p>Update the current version and next version in <code>mkdocs.yml</code>: <pre><code>extra:\n  fladle:\n    release: '0.19.1'\n    next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER'\n</code></pre></p> </li> <li> <p>Take one last look <pre><code>git diff\n</code></pre></p> </li> <li> <p>Commit all local changes <pre><code>git commit -am \"Prepare 0.19.1 release\"\n</code></pre></p> </li> <li> <p>Create a tag and push it <pre><code>git tag v0.19.1\ngit push origin v0.19.1\n</code></pre></p> </li> <li> <p>Upload to Maven Central (this must run in two separate commands since they are from two different namespaces) <pre><code>./gradlew :fladle-plugin:publishFladlePluginMarkerMavenPublicationToMavenCentralRepository :fladle-plugin:publishFulladlePluginMarkerMavenPublicationToMavenCentralRepository -Pfladle.release \n./gradlew :fladle-plugin:publishPluginMavenPublicationToMavenCentralRepository -Pfladle.release\n</code></pre></p> </li> <li> <p>Upload to Gradle Plugin Portal <pre><code>./gradlew :fladle-plugin:publishPlugins -Pfladle.releaseMode -Dorg.gradle.internal.publish.checksums.insecure=true\n</code></pre></p> </li> <li> <p>Release to Maven Central</p> <ul> <li>Login to Maven Central Repository: https://central.sonatype.com/</li> <li>Click on Publish</li> </ul> </li> <li> <p>Merge the release branch to master <pre><code>git checkout master\ngit pull\ngit merge --no-ff release_0.19.1\n</code></pre></p> </li> <li> <p>Update <code>version</code> in <code>fladle-plugin/build.gradle.kts</code> (increase version and add <code>-SNAPSHOT</code>) <pre><code>version = \"REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT\"\n</code></pre></p> </li> <li> <p>Commit your changes <pre><code>git commit -am \"Prepare for next development iteration\"\n</code></pre></p> </li> <li> <p>Push your changes <pre><code>git push\n</code></pre></p> </li> </ul>"},{"location":"results/","title":"Results","text":"<p>By default, results are placed in the <code>build/fladle/results/&lt;matrix name&gt;</code> directly.</p> <p>A merged junit report is available in <code>JUnitReport.xml</code></p> <p>On failures only, an html report with links to failed shards is also generated in the results directory with the name <code>HtmlErrorReport.html</code>.</p> <p>A cost report is also available <code>CostReport.txt</code>.</p>"},{"location":"snapshots/","title":"Testing Snapshot Releases","text":"<p>To test the Fladle snapshot release you have two options:</p>"},{"location":"snapshots/#traditional","title":"Traditional","text":"<p>Root <code>build.gradle</code> <pre><code>buildscript {\nrepositories {\nmaven {\nurl \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\n}\ndependencies {\nclasspath \"com.osacky.flank.gradle:fladle:0.19.1-SNAPSHOT\"\n}\n}\n</code></pre></p> <p>Project <code>build.gradle</code> <pre><code>apply plugin: \"com.osacky.fladle\"\n</code></pre></p>"},{"location":"snapshots/#plugin-management","title":"Plugin Management","text":"<p><code>settings.gradle</code> <pre><code>pluginManagement {\nrepositories {\nmaven {\nurl \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\ngradlePluginPortal()\n}\n}\n</code></pre></p> <p>Android application <code>build.gradle</code> <pre><code>plugins {\nid \"com.osacky.fladle\" version \"0.19.1-SNAPSHOT\"\n}\n</code></pre></p>"}]}